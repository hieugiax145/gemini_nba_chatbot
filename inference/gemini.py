import google.generativeai as genai
import os 
# Potentially keep these if needed for specific filtering or pre-defined answers
# from data.text_data import unsure, non_nba 
# from modules.analysis import isNBA # You might not need isNBA if Gemini handles context

# --- It's highly recommended to load API keys securely, e.g., from environment variables ---
# Example: Load from environment variable
# GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY') 
# Or uncomment and paste directly (less secure for production)
# GOOGLE_API_KEY = "YOUR_API_KEY" 

# Configure the Gemini client library
try:
    # Securely configure the API key (best practice)
    GOOGLE_API_KEY = 'AIzaSyBSbxCDL6j8UJobJJN8ghAlR1ReQSW_FdE'
    if not GOOGLE_API_KEY:
        raise ValueError("GOOGLE_API_KEY environment variable not set.")
    genai.configure(api_key=GOOGLE_API_KEY)
except Exception as e:
    print(f"Error configuring Gemini API: {e}")
    # Handle the error appropriately - maybe disable Gemini features

class InferenceNetwork(object):
    """
    A class to facilitate query inference using the Google Gemini API.

    This class takes a user query, sends it to the Gemini API, 
    and returns the generated response.
    """

    def __init__(self, query):
        """
        Initializes the InferenceNetwork with the user query.

        Args:
            query (str): The query or question passed in by the user.
        """
        self.query = query
        # Initialize the Gemini model (e.g., 'gemini-pro' or 'gemini-1.5-flash')
        # Choose the model that best suits your needs and budget
        try:
            self.model = genai.GenerativeModel('gemini-2.0-flash') 
        except Exception as e:
            print(f"Error initializing Gemini model: {e}")
            self.model = None # Mark model as unusable


        # --- Remove old classifier loading ---
        # model_file = "inference/models/classifiers/query_classifier.pkl"
        # query_clf = joblib.load(model_file)
        # self.final=query_clf

    def response(self):
        """
        Generates and returns a response using the Gemini API.

        Returns:
            str: The response generated by the Gemini model, or an error message.
        """
        if not self.model:
             return "Sorry, I cannot process your request due to an internal error (Model initialization failed)."

        # --- Construct the prompt for Gemini ---
        # You can add context or instructions for the model
        # Example: Provide context that it's an NBA chatbot
        prompt = f"""You are a helpful assistant specializing in NBA information. 
        Please answer the following question based on your knowledge:

        Question: "{self.query}"

        Answer:""" 

        try:
            # --- Call the Gemini API ---
            gemini_response = self.model.generate_content(prompt)

            # --- Extract the text response ---
            # Add checks for safety ratings or blocked prompts if necessary
            if gemini_response.parts:
               return gemini_response.text
            elif gemini_response.prompt_feedback.block_reason:
               # Handle cases where the prompt was blocked
               block_reason = gemini_response.prompt_feedback.block_reason
               print(f"Prompt blocked due to: {block_reason}")
               return f"Sorry, I cannot respond to that query due to content restrictions ({block_reason})."
            else:
               # Handle other potential empty response scenarios
               print("Gemini returned an empty response.")
               return "Sorry, I couldn't generate a response for that."

        except Exception as e:
            # --- Handle API errors ---
            print(f"An error occurred while calling the Gemini API: {e}")
            # You could return a generic error message or try a fallback
            return f"Sorry, I encountered an error trying to answer your question. Error: {e}"

        # --- Remove old logic for isNBA and node selection ---
        # ... (all the old if/else logic based on self.node_type and isNBA) ...